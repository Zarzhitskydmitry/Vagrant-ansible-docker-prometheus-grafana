---
- block: #====BLOCK INSTALL DOCKER AND DOCKER-COMPOSE FOR UBUNTU====
    - name: Install aptitude using apt
      apt:
        name=aptitude 
        state=latest 
        update_cache=yes 
        force_apt_get=yes

    - name: Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools' ]

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present
        update_cache: yes

    - name: Update apt and install docker-ce
      apt: name={{ item }} state=latest
      loop: ['docker-ce','docker-ce-cli','containerd.io','docker-buildx-plugin']

    - name: Install docker-compose
      get_url: 
        url : https://github.com/docker/compose/releases/download/1.25.1-rc1/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'

    - name: Install Docker Module for Python
      pip:
        name={{ item }}
      loop: ['docker','docker-compose']

    - name: check docker is active
      service: name=docker state=started enabled=yes

- block: #====BLOCK INSTALL NODE-EXPORTER FOR UBUNTU====
    - name: check if node exporter exist
      stat:
        path: "{{ node_exporter_bin }}"
      register: __check_node_exporter_present

    - name: create node exporter user
      user:
        name: "{{ node_exporter_user }}"
        append: true
        shell: /usr/sbin/nologin
        system: true
        create_home: false

    - name: create node exporter config dir
      file:
        path: "{{ node_exporter_dir_conf }}"
        state: directory
        owner: "{{ node_exporter_user }}"
        group: "{{ node_exporter_group }}"

    - name: if node exporter exist get version
      shell: "cat /etc/systemd/system/node_exporter.service | grep Version | sed s/'.*Version '//g"
      when: __check_node_exporter_present.stat.exists == true
      changed_when: false
      register: __get_node_exporter_version
      
    - name: download and unzip node exporter if not exist
      unarchive:
        src: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
        dest: /tmp/
        remote_src: yes
        validate_certs: no

    - name: move the binary to the final destination
      copy:
        src: "/tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter"
        dest: "{{ node_exporter_bin }}"
        owner: "{{ node_exporter_user }}"
        group: "{{ node_exporter_group }}"
        mode: 0755
        remote_src: yes
      when: __check_node_exporter_present.stat.exists == false or not __get_node_exporter_version.stdout == node_exporter_version

    - name: clean
      file:
        path: /tmp/node_exporter-{{ node_exporter_version }}.linux-amd64/
        state: absent

    - name: install service
      template:
        src: node_exporter.service.j2
        dest: /etc/systemd/system/node_exporter.service
        owner: root
        group: root
        mode: 0755
      notify: reload_daemon_and_restart_node_exporter
      
    - meta: flush_handlers
    - name: service always started
      systemd: name=node_exporter state=started enabled=yes

- block: #====DOCKER-COMPOSE FILE PROMETHEUS/GRAFANA====
    - name: copy compose file
      copy:
        src=docker-compose.yml
        dest=/home
        mode=0775
      notify: restart_docker_compose

    - name: prometheus file
      template:
        src: prometheus.yml.j2
        dest: /home/prometheus.yml
        owner: root
        group: root
        mode: 0755
      notify: restart_docker_compose

    - name: prometheus file datasource
      template:
        src: prometheus_ds.yml.j2
        dest: /home/prometheus_ds.yml
        owner: root
        group: root
        mode: 0755
      notify: restart_docker_compose

- block: #====DOCKER-COMPOSE UP====
    - name: deploy docker-compose stack
      community.docker.docker_compose:
        project_src: /home
        files: docker-compose.yml
        recreate: always
